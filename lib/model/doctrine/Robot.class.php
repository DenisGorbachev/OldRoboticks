<?php

/**
 * Robot
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    robotics
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Robot extends BaseRobot {
	public function __toString() {
		return sprintf($this->getTable()->getToStringFormat(), $this->id, $this->getStatus());
	}

    public function __toStatusString() {
        return sprintf($this->getTable()->getToStringFormat(), $this->id, $this->getStatus());
    }

    public function getName() {
        return (string)$this->getEffectiveWord();
    }

    public function getStatusArray() {
        return str_split($this->getStatus());
    }

    public function setStatus($status) {
        if (sfContext::hasInstance()) {
            $statusWordName = preg_replace('/_/u', '', $status);
            $effectiveWord = WordTable::getInstance()->findOneBy('name', $statusWordName);
            if ($effectiveWord) {
                $this->setEffectiveWord($effectiveWord);
                $this->setEffectiveWordId($effectiveWord->getId());
            } else {
                $this->setEffectiveWord(null);
                $this->setEffectiveWordId(null);
            }
        }
        return $this->_set('status', $status);
    }

    public function hasLetter($letter) {
        return $this->getTable()->hasDenotative($this->getStatus(), $letter);
    }

    public function hasDenotative($denotative) {
        return $this->getTable()->hasDenotative($this->getName(), $denotative);
    }

    public function hasFunction($meaning) {
        return $this->getTable()->hasFunction($this->getName(), $meaning);
    }

	public function getFunctions() {
        return $this->getTable()->getFunctionsForName($this->getName());
	}

    public function getEffectiveStatus() {
        return preg_replace('/_/u', '', $this->getStatus());
    }

    public function hasCargo($letter) {
        return mb_strpos($this->getCargo(), $letter) !== false;
    }

    public function hasFreeCargoSpace() {
        return mb_strlen($this->getCargo()) < $this->getTotalCargoSpace();
    }

    public function getTotalCargoSpace() {
        return $this->getTable()->getFunctionCount($this->getName(), 'transport');
    }

    public function canFire($letter) {
        return $this->getTable()->canFire($this->getName(), $letter);
    }

    public function isDisabled() {
        return !$this->getEffectiveWordId();
    }

    public function hasLetterPinchedOut($letter) {
        return in_array($letter, array_diff_assoc($this->getWord()->getNameArray(), $this->getStatusArray()));
    }

	public function calculateSpeed() {
		preg_match_all('/'.implode('|', $this->getTable()->getVowels()).'/u', $this->getName(), $matches, PREG_SET_ORDER);
		return max(0, 4*count($matches) - mb_strlen($this->getName()));
	}

    public function getFireableRange() {
        return mb_strlen($this->getName())*2;
    }

	public function getScanBorders() {
		$base = $this->Sector;
		return array(
			'blX' => $base->x - sfConfig::get('app_scan_size'),
			'blY' => $base->y - sfConfig::get('app_scan_size'),
			'trX' => $base->x + sfConfig::get('app_scan_size'),
			'trY' => $base->y + sfConfig::get('app_scan_size'),
		);
	}

    public function hasInFireableRange(Robot $target) {
        return SectorTable::getInstance()->isInRange($this->getSector(), $target->getSector(), $this->getFireableRange());
    }

    public function doExtract() {
        $sector = $this->getSector();
        $sector->setDrops($sector->getDrops().$sector->getLetter());
        $sector->save();
        return $sector->getLetter();
    }

    public function doDrop($letter) {
        $sector = $this->getSector();
        $sector->setDrops($sector->getDrops().$letter);
        $this->setCargo(preg_replace('/'.preg_quote($letter, '/').'/u', '', $this->getCargo(), 1));
    }

    public function doPick($letter) {
        $sector = $this->getSector();
        $sector->setDrops(preg_replace('/'.preg_quote($letter, '/').'/u', '', $sector->getDrops(), 1));
        $this->setCargo($this->getCargo().$letter);
    }

    public function doAssemble($name) {
        $connection = $this->getTable()->getConnection();
        $connection->beginTransaction();
        try {
            $sector = $this->getSector();
            $sector->setDropsArray(array_diff($sector->getDropsArray(), str_split($name)));
            $sector->save();
            $robot = new Robot();
            $robot->setStatus($name);
            $robot->setUser($this->getUser());
            $robot->setSector($sector);
            $robot->save();
        } catch (Exception $e) {
            $connection->rollback();
        }
        $connection->commit();
        return $robot;
    }

    public function doDisassemble(Robot $target) {
        $connection = $this->getTable()->getConnection();
        $connection->beginTransaction();
        try {
            $sector = $this->getSector();
            $sector->setDrops($sector->getDrops().$target->getEffectiveStatus());
            $sector->save();
            $target->delete();
        } catch (Exception $e) {
            $connection->rollback();
        }
        $connection->commit();
    }

    public function doFire(Robot $target, $letter) {
        $target->setStatus(preg_replace('/'.preg_quote($letter, '/').'/u', '_', $target->getStatus(), 1));
        $target->save();
    }

    public function doRepair(Robot $target, $letter) {
        $statusArray = $target->getStatusArray();
        foreach (array_keys($target->getWord()->getNameArray(), $letter) as $key) {
            if ($statusArray[$key] == '_') {
                $connection = $this->getTable()->getConnection();
                $connection->beginTransaction();
                try {
                    $sector = $this->getSector();
                    $sector->setDrops(preg_replace('/'.preg_quote($letter, '/').'/u', '', $sector->getDrops(), 1));
                    $sector->save();
                    $statusArray[$key] = $letter;
                    $target->setStatus(implode('',  $statusArray));
                    $target->save();
                } catch (Exception $e) {
                    $connection->rollback();
                }
                $connection->commit();
                return $target;
            }
        }
        throw new sfException('Can\'t repair letter "'.$letter.'" in robot '.$target.', something is wrong with validation');
    }

    public function preInsert($event) {
        if (!$this->getWord()->getId()) {
			$word = WordTable::getInstance()->findOneBy('name', $this->getStatus());
            $this->setWord($word);
            $this->setEffectiveWord($word);
        }
        $this->speed = $this->calculateSpeed(); // preSave is invoked before preInsert
        parent::preInsert($event);
    }

	public function preSave($event) {
		$this->speed = $this->calculateSpeed();
        parent::preSave($event);
	}

}
