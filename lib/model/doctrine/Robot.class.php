<?php

/**
 * Robot
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    robotics
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Robot extends BaseRobot {
	public function __toString() {
		return '#'.$this->id.' "'.$this->getName().'"';
	}

    public function getName() {
        return (string)$this->getWord();
    }

    public function hasDenotative($denotative) {
        return $this->getTable()->hasDenotative($this->getName(), $denotative);
    }

    public function hasFunction($meaning) {
        return $this->getTable()->hasFunction($this->getName(), $meaning);
    }

	public function getFunctions() {
        return $this->getTable()->getFunctionsForName($this->getName());
	}

	public function calculateSpeed() {
		preg_match_all('/'.implode('|', $this->getTable()->getVowels()).'/u', $this->getName(), $matches, PREG_SET_ORDER);
		return max(0, 3*count($matches) - mb_strlen($this->getName()));
	}

	public function getScanBorders() {
		$base = $this->Sector;
		return array(
			'blX' => $base->x - sfConfig::get('app_scan_size'),
			'blY' => $base->y - sfConfig::get('app_scan_size'),
			'trX' => $base->x + sfConfig::get('app_scan_size'),
			'trY' => $base->y + sfConfig::get('app_scan_size'),
		);
	}

    public function doExtract() {
        $sector = $this->getSector();
        $sector->setDrops($sector->getDrops().$sector->getLetter());
        $sector->save();
        return $sector->getLetter();
    }

    public function doAssemble($name) {
        $connection = $this->getTable()->getConnection();
        $connection->beginTransaction();
        try {
            $sector = $this->getSector();
            $sector->setDropsArray(array_diff($sector->getDropsArray(), str_split($name)));
            $sector->save();
            $robot = new Robot();
            $robot->setStatus($name);
            $robot->setUser($this->getUser());
            $robot->setSector($sector);
            $robot->save();
        } catch (Exception $e) {
            $connection->rollback();
        }
        $connection->commit();
        return $robot;
    }

    public function preInsert($event) {
        $this->setWord(WordTable::getInstance()->findOneBy('name', $this->getStatus()));
        $this->speed = $this->calculateSpeed(); // preSave is invoked before preInsert
        parent::preInsert($event);
    }

	public function preSave($event) {
		$this->speed = $this->calculateSpeed();
        parent::preSave($event);
	}

}
