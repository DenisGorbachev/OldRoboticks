detect_relations: true
actAs:
  Timestampable:		~

Word:
  columns:
    name:				{ type: string(255), unique: true, readonly: true }
  actAs:					[]

User:
  columns:
    username:			{ type: string(255), minlength: 3, unique: true, readonly: true }
    password:			{ type: string(255) }
    last_login: 			{ type: timestamp }
    current_login: 	{ type: timestamp }
    remember_key:	{ type: string(255) }

Realm:
  columns:
    name:			         { type: string(255), minlength: 3, unique: true, readonly: true }
    password:                { type: string(255) }
    width:                      { type: integer, default: 50, readonly: true }
    height:                      { type: integer, default: 50, readonly: true }
    options:                { type: array(65535), default: [] }
    controller_class:	  { type: string(255), readonly: true } # Used for realm controllers initialization
    owner_id:                { type: integer }
  relations:
    Owner:
      class:                  User
      foreignAlias:		OwnedRealms
      local:				owner_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE
    Users:
      class:                  User
      refClass:             UserRealm
      foreignAlias:		Realms
      local:			       realm_id
      foreign:			 user_id
      onDelete:			CASCADE
      onUpdate:		CASCADE

UserRealm:
  columns:
    user_id:		          	{ type: integer }
    realm_id:				{ type: integer }
  options:
    symfony:
      filter: false
      form: false

Stance:
  columns:
    realm_id:		{ type: integer }
    from_id:			{ type: integer }
    to_id:				{ type: integer }
    type:				{ type: enum, values: [ally, enemy] }
  actAs:
    Restricted:
      column:       realm_id
    Timestampable:		~
  relations:
    Realm:
      class:				Realm
      foreign:			id
      local:				realm_id
      foreignAlias:		Stances
      onDelete:			CASCADE
      onUpdate:		CASCADE
    From:
      class:				User
      foreign:			id
      local:				from_id
      foreignAlias:		StancesFrom
      onDelete:			CASCADE
      onUpdate:		CASCADE
    To:
      class:				User
      foreign:			id
      local:				to_id
      foreignAlias:		StancesTo
      onDelete:			CASCADE
      onUpdate:		CASCADE

Sector:
  columns:
    realm_id:		{ type: integer }
    x:						{ type: integer, readonly: true }
    y:						{ type: integer, readonly: true }
    letter:				{ type: string(1), fixed: true, readonly: true, default: "" }
    drops:				{ type: text }
  indexes:
    coordinates:
      fields:				[x, y]
  actAs:
    Restricted:
      column:       realm_id
    Timestampable:		~
  relations:
    Realm:
      class:				Realm
      foreign:			id
      local:				realm_id
      foreignAlias:		Sectors
      onDelete:			CASCADE
      onUpdate:		CASCADE

Robot:
  columns:
    realm_id:		{ type: integer }
    status:				{ type: string(255), default: "TEA" }
    speed:				{ type: integer }
    cargo:				{ type: string(5) }
    word_id:				{ type: integer }
    effective_word_id:	{ type: integer, notnull: false }
    user_id:				{ type: integer }
    sector_id:			{ type: integer }
    active_at:           { type: integer, default: 0 }
  actAs:
    Restricted:
      column:       realm_id
    Timestampable:		~
  relations:
    Realm:
      class:				Realm
      foreign:			id
      local:				realm_id
      foreignAlias:		Robots
      onDelete:			CASCADE
      onUpdate:		CASCADE
    Word:
      class:                Word
      foreignAlias:		Robots
      local:				word_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE
    EffectiveWord:
      class:                Word
      foreignAlias:		EffectiveRobots
      local:				effective_word_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE
    User:
      foreignAlias:		Robots
      local:				user_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE
    Sector:
      foreignAlias:		Robots
      local:				sector_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE

Mail:
  columns:
    sender_id:		{ type: integer }
    recipient_id:	{ type: integer }
    realm_id:		{ type: integer, notnull: false }
    type:               { type: string(255), notnull: false, default: null }
    subject:			{ type: string(255), minlength: 3 }
    text:			        { type: text }
    is_read:           { type: boolean, default: false }
  relations:
    Realm:
      class:				Realm
      foreign:			id
      local:				realm_id
      foreignAlias:		Mail
      onDelete:			CASCADE
      onUpdate:		CASCADE
    Sender:
      class:				User
      foreign:			id
      local:				sender_id
      foreignAlias:		MailSent
      onDelete:			CASCADE
      onUpdate:		CASCADE
    Recipient:
      class:				User
      foreign:			id
      local:				recipient_id
      foreignAlias:		MailReceived
      onDelete:			CASCADE
      onUpdate:		CASCADE

Bot:
  columns:
    controller_class:   { type: string(255), readonly: true }
    username:           { type: string(255), readonly: true }
    password:           { type: string(255), readonly: true }
    realm_id:           { type: integer }
    info:                 { type: array(65535) }
    active_at:           { type: integer, default: 0 }
  relations:
#    User:
#      foreignAlias:		Bots
#      local:				user_id
#      foreign:			id
#      onDelete:			CASCADE
#      onUpdate:		CASCADE
    Realms:
      foreignAlias:		Bots
      local:				realm_id
      foreign:			id
      onDelete:			CASCADE
      onUpdate:		CASCADE
